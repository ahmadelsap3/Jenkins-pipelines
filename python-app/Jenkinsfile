@Library('sharedlib') _
node {
    properties([
        parameters([
            string(name: 'DOCKER_IMAGE', defaultValue: 'my-python-app', description: 'Docker image name'),
            string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag')
        ])
    ])
    stage('Workspace Cleanup') {
    bat 'del /Q /F *'
    // Do NOT delete python-app!
    }

    stage('Clone Repo') {
        // No need to clone, just verify repo presence
        bat 'dir'
    }

    stage('Init') {
        echo "Using sharedlib bounds: ${bounds(1,100)}"
        bat 'dir python-app'
    }

    try {
        stage('Install') {
            bat 'python --version'
            bat 'if exist python-app\\requirements.txt (pip install -r python-app\\requirements.txt) else (echo No requirements.txt)'
        }

        stage('Test & Lint (parallel)') {
            parallel(
                Tests: {
                    stage('Unit Tests') {
                        bat 'if exist python-app\\test (python -m pytest python-app || echo tests failed)'
                    }
                },
                Lint: {
                    stage('Lint') {
                        bat 'python -m pip show flake8 >nul 2>&1 || python -m pip install flake8'
                        bat 'python -m flake8 python-app || echo lint issues'
                    }
                }
            )
        }

        stage('Build Docker') {
            bat 'dir'
            bat 'dir python-app'
            bat "docker build -f python-app/Dockerfile -t ${params.DOCKER_IMAGE}:${params.DOCKER_TAG} python-app"
            bat 'docker images'
        }

        stage('Login & Push') {
            withCredentials([usernamePassword(credentialsId: 'Docker-ID', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                bat "docker tag ${params.DOCKER_IMAGE}:${params.DOCKER_TAG} %DOCKER_USER%/${params.DOCKER_IMAGE}:${params.DOCKER_TAG}"
                bat 'docker images'
                bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'
                bat "docker push %DOCKER_USER%/${params.DOCKER_IMAGE}:${params.DOCKER_TAG}"
            }
        }

    } catch (err) {
        echo "Build failed: ${err}"
        currentBuild.result = 'FAILURE'
        throw err
    } finally {
        stage('Cleanup') {
            bat "docker rmi ${params.DOCKER_IMAGE}:${params.DOCKER_TAG} || exit 0"
            bat "docker rmi %DOCKER_USER%/${params.DOCKER_IMAGE}:${params.DOCKER_TAG} || exit 0"
        }
    }
}