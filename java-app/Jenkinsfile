@Library('sharedlib') _
pipeline {
    agent any
    environment {
        // Single "Username with password" credential stored in Jenkins
        // provides DOCKER_CREDENTIALS_USR and DOCKER_CREDENTIALS_PSW
        DOCKER_CREDENTIALS = credentials('f9c09f9e-9bd8-430a-8a62-04954b75b228')
    }
    parameters {
        string(name: 'DOCKER_IMAGE', defaultValue: 'my-java-app', description: 'Docker image name')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag')
    }
    stages {
        stage('Check Docker') {
            steps {
                bat 'docker version'
            }
        }

        stage('Build Jar') {
            steps {
                script {
                    def myBounds = bounds(1, 100)
                    echo "Bounds: ${myBounds}"
                }
                bat 'dir java-app'
                bat 'javac java-app\\Main.java'
                // package compiled class into app.jar (path to class provided)
                bat '"C:\\Program Files\\Java\\jdk-17\\bin\\jar.exe" cf app.jar java-app\\Main.class'
            }
        }

        stage('Build Docker') {
            steps {
                // show the credential/user variables for debugging (masked in Jenkins UI)
                bat 'set | findstr /I "DOCKER_CREDENTIALS DOCKER_IMAGE DOCKER_TAG"'
                // compute fully-qualified image name and echo it
                script {
                    env.FQ_IMAGE = "${DOCKER_CREDENTIALS_USR}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                    echo "FQ_IMAGE=${env.FQ_IMAGE}"
                }
                // build with a local tag first
                bat "docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% ."
                // retag the locally-built image to your namespace explicitly
                bat "docker tag %DOCKER_IMAGE%:%DOCKER_TAG% %DOCKER_CREDENTIALS_USR%/%DOCKER_IMAGE%:%DOCKER_TAG%"
                // show images and verify the exact tag exists
                bat 'docker images'
            }
        }

        stage('Docker Login & Push') {
            steps {
                echo "About to push: ${env.FQ_IMAGE}"
                // use withCredentials to inject username/password safely
                withCredentials([usernamePassword(credentialsId: 'f9c09f9e-9bd8-430a-8a62-04954b75b228', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    // show images for debug
                    bat 'docker images'
                    // login using injected vars
                    bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'
                    // push the fully-qualified image under the authenticated user
                    bat 'docker push %DOCKER_USER%/%DOCKER_IMAGE%:%DOCKER_TAG%'
                }
            }
        }
    }
    post {
        always {
            bat "docker rmi %DOCKER_CREDENTIALS_USR%/%DOCKER_IMAGE%:%DOCKER_TAG% || exit 0"
            bat "del Main.class app.jar"
        }
    }
}